{"version":3,"sources":["configs/MenusConfig.tsx","pages/home/index.tsx","pages/language/swift/index.tsx","pages/language/typescript/index.tsx","pages/visualdata/antd/basic/index.tsx","configs/RoutesConfig.tsx","pages/App.tsx","serviceWorker.ts","index.tsx","pages/App.less"],"names":["menus","key","title","icon","HddTwoTone","CodeTwoTone","route","FundTwoTone","CrownTwoTone","PieChartTwoTone","HomePage","props","useState","hits","data","setData","reqCount","setReqCount","useEffect","a","console","log","axios","result","fetchData","onClick","count","map","item","objectID","href","url","type","onChange","e","files","target","reader","FileReader","onload","readAsText","SwiftPage","TypeScriptPage","AntdBasicPage","routes","name","path","component","Header","Content","Sider","SubMenu","App","history","useHistory","handleSubMenuTitleClick","className","styles","header","theme","mode","keyPath","domEvent","push","menusConfig","onTitleClick","subItem","subTitle","subIcon","Item","content","container","routesConfig","index","render","exact","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.82e42272.chunk.js","sourcesContent":["import { HddTwoTone, CodeTwoTone, FundTwoTone, CrownTwoTone, PieChartTwoTone } from '@ant-design/icons'\nimport React, { ReactNode } from 'react'\n\ninterface LJMenu {\n  key: string,\n  title: string,\n  icon: ReactNode,\n  menus?: LJMenu[],\n  route?: string\n}\n\n/**\n   * {\n      key: '',\n      title: '',\n      icon: '',\n      menus: [\n        {\n          key: '',\n          title: '',\n          icon: '',\n          route: ''\n        }\n      ]\n    }\n   */\nconst menus: LJMenu[] = [\n  {\n    key: 'language',\n    title: '语言',\n    icon: <HddTwoTone />,\n    menus: [\n      {\n        key: 'swift',\n        title: 'Swift',\n        icon: <CodeTwoTone />,\n        route: '/language/swift'\n      },\n      {\n        key: 'typescript',\n        title: 'JS/TS',\n        icon: <CodeTwoTone />,\n        route: '/language/typescript'\n      }\n    ]\n  },\n  {\n    key: 'structure',\n    title: '架构',\n    icon: <FundTwoTone />,\n    menus: [\n      {\n        key: 'layout',\n        title: '布局',\n        icon: <CodeTwoTone />,\n        route: '/layout'\n      }\n    ]\n  },\n  {\n    key: 'experience',\n    title: '体验',\n    icon: <CrownTwoTone />,\n    menus: [\n      {\n        key: 'animation',\n        title: '动画',\n        icon: <CodeTwoTone />,\n        route: '/animation'\n      }\n    ]\n  },\n  {\n    key: 'visualdata',\n    title: '可视化数据',\n    icon: <PieChartTwoTone />,\n    menus: [\n      {\n        key: 'antdbasic',\n        title: 'antd基础',\n        icon: <CodeTwoTone />,\n        route: '/antd/basic'\n      }\n    ]\n  }\n]\n\nexport default menus\n","import React, { useEffect, useState, ChangeEvent } from 'react'\nimport { Button } from 'antd'\nimport axios from 'axios'\nimport ReactMarkdown from 'react-markdown'\n\ninterface Props {\n\n}\n\ninterface News {\n  objectID: string,\n  url: string,\n  title: string\n}\n\nconst HomePage = (props: Props) => {\n  const [data, setData] = useState<{ hits: News[] }>({ hits: [] })\n  const isManual = true\n  const [reqCount, setReqCount] = useState(0)\n\n  useEffect(() => {\n    if (isManual && reqCount === 0) {\n      return\n    }\n\n    console.log('excute side effect ', reqCount)\n    async function fetchData () {\n      console.log('excute fetch data')\n      const result = await axios(\n        'https://hn.algolia.com/api/v1/search?query=redux'\n      )\n      setData(result.data)\n    }\n    fetchData()\n  }, [reqCount, isManual])\n\n  const handleClick = () => {\n    setReqCount(count => count + 1)\n  }\n\n  const handleClearClick = () => {\n    setData({ hits: [] })\n  }\n\n  const handleFileInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files\n    const reader = new FileReader()\n    reader.onload = (e: ProgressEvent<FileReader>) => {\n      const { result } = e.target as FileReader\n      console.log('file is ', result)\n    }\n    reader.readAsText(files![0])\n  }\n\n  return (\n    <>\n      <a onClick={() => { }}>收藏</a>\n      <br />\n      <button onClick={handleClick}>Run</button>\n      <button onClick={handleClearClick}>Clear</button>\n      <ul>\n        {\n          data.hits.map(item => (\n            <li key={item.objectID}>\n              <a href={item.url}>{item.title}</a>\n            </li>\n          ))\n        }\n      </ul>\n      <input type='file' onChange={handleFileInputChange} />\n    </>\n  )\n}\n\nexport default HomePage\n\n/**\n * 数据 -> Excel\n * Excel -> 数据\n */\n","import React from 'react'\n\ninterface Props {\n\n}\n\nconst SwiftPage = (props: Props) => {\n  return (\n    <div>\n      This is swift page.\n    </div>\n  )\n}\n\nexport default SwiftPage\n","import React from 'react'\n\ninterface Props {\n\n}\n\nconst TypeScriptPage = (props: Props) => {\n  return (\n    <div>\n      This is typescript page.\n    </div>\n  )\n}\n\nexport default TypeScriptPage\n","import React from 'react'\n\ninterface Props {\n\n}\n\nconst AntdBasicPage = (props: Props) => {\n  return (\n    <div>\n      This is AntdBasicScreen!\n    </div>\n  )\n}\n\nexport default AntdBasicPage\n\n","import React from 'react'\n\nimport HomePage from 'pages/home'\nimport SwiftPage from 'pages/language/swift'\nimport TypeScriptPage from 'pages/language/typescript'\nimport AntdBasicPage from 'pages/visualdata/antd/basic'\n\ninterface LJRoute {\n  name: string,\n  path: string,\n  component: React.ReactNode\n  routes?: LJRoute[]\n}\n\nconst routes: LJRoute[] = [\n  {\n    name: 'Swift',\n    path: '/language/swift',\n    component: <SwiftPage />,\n  },\n  {\n    name: 'TypeScript',\n    path: '/language/typescript',\n    component: <TypeScriptPage />,\n  },\n  {\n    name: 'AntdBasic',\n    path: '/antd/basic',\n    component: <AntdBasicPage />\n  },\n  {\n    name: 'Home',\n    path: '/',\n    component: <HomePage />\n  },\n]\n\nexport default routes\n","import React from 'react'\nimport { Layout, Menu } from 'antd'\nimport { Switch, Route, useHistory } from 'react-router-dom'\nimport styles from './App.less'\nimport menusConfig from 'configs/MenusConfig'\nimport routesConfig from 'configs/RoutesConfig'\nimport { ClickParam } from 'antd/lib/menu'\nconst { Header, Content, Sider } = Layout\nconst { SubMenu } = Menu\n\nfunction App() {\n  const history = useHistory()\n\n  const handleMenuClick = ({ item, key, keyPath, domEvent }: ClickParam) => {\n    console.log('menu is ', key, keyPath)\n    history.push(key)\n  }\n\n  const handleSubMenuTitleClick = () => {\n\n  }\n\n  return (\n    <Layout>\n      <Header className={styles.header}>\n        <div className={styles.title}>Header</div>\n      </Header>\n      <Layout>\n        <Sider theme='light'>\n          <Menu mode='inline' onClick={handleMenuClick}>\n            {\n              menusConfig.map((item) => {\n                const { key, title, icon, menus } = item\n                return (\n                  <SubMenu key={key} title={title} icon={icon} onTitleClick={handleSubMenuTitleClick} >\n                    {\n                      menus?.map((subItem) => {\n                        const { key: subKey, title: subTitle, icon: subIcon, route } = subItem\n                        return (\n                          <Menu.Item key={route}>\n                            {subIcon}\n                            {subTitle}\n                          </Menu.Item>\n                        )\n                      })\n                    }\n                  </SubMenu>\n                )\n              })\n            }\n          </Menu>\n        </Sider>\n        <Content className={styles.content}>\n          <div className={styles.container}>\n            <Switch>\n              {\n                routesConfig.map((item, index) => {\n                  const { path, component } = item\n                  return <Route key={'route' + index} path={path} render={() => component} exact={true} />\n                })\n              }\n            </Switch>\n          </div>\n        </Content>\n      </Layout>\n    </Layout>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register (config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport './index.css'\nimport App from 'pages/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <Router>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Router>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_1T0qS\",\"content\":\"content_8fUCi\",\"container\":\"container_3DTiO\"};"],"sourceRoot":""}